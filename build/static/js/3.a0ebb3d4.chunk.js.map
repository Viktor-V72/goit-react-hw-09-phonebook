{"version":3,"sources":["Components/Filter/Filter.module.css","Components/ContactForm/ContactForm.jsx","Components/ContactListItem/ContactListItem.jsx","Components/ContactList/ContactList.jsx","Components/Filter/Filter.jsx","views/ContactsView.jsx","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","Components/ContactForm/ContactForm.module.css","Components/ContactListItem/ContactListItem.module.css","Components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","state","name","number","handleInputChange","event","currentTarget","value","setState","handleSubmit","e","preventDefault","contact","id","shortid","generate","props","onSubmit","reset","this","className","styles","form","label","input","nameId","type","onChange","pattern","title","required","telId","button","Component","connect","dispatch","contactsOperations","addContact","onDeleteContact","deleteContact","item","onClick","contacts","contactsSelectors","getVisibleContacts","contact_list","map","getFilter","contactsActions","filter","target","text","ContactsView","fetchContacts","isLoadingContacts","React","getLoading","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","length","Error","unique","split","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","RegExp","replace","test"],"mappings":"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","file":"static/js/3.a0ebb3d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Filter_text__1Ieaf\",\"label\":\"Filter_label__1Gdr3\",\"input\":\"Filter_input__2Qli4\"};","import { Component } from 'react';\nimport shortid from 'shortid';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../Redux/contacts';\nimport styles from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      id: shortid.generate(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n\n    this.props.onSubmit(contact);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.form}>\n        <label className={styles.label}>\n          <span className={styles.name}>Name</span>\n          <input\n            className={styles.input}\n            id={this.nameId}\n            type=\"text\"\n            value={this.state.name}\n            onChange={this.handleInputChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={styles.label}>\n          <span className={styles.name}>Number</span>\n          <input\n            className={styles.input}\n            id={this.telId}\n            value={this.state.number}\n            onChange={this.handleInputChange}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button className={styles.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: contact => dispatch(contactsOperations.addContact(contact)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\nimport styles from './ContactListItem.module.css';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../Redux/contacts/contacts-operations';\n\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <li className={styles.item}>\n      <p className={styles.contact}>\n        {name}: {number}\n      </p>\n      <button\n        className={styles.button}\n        onClick={() => onDeleteContact(id)}\n        type=\"button\"\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactListItem);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport contactsSelectors from '../../Redux/contacts/contacts-selectors';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts }) => (\n  <ul className={styles.contact_list}>\n    {contacts.map(({ name, number, id }) => (\n      <ContactListItem name={name} number={number} key={id} id={id} />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nexport default connect(mapStateToProps)(ContactList);\n","import styles from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport { contactsActions, contactsSelectors } from '../../Redux/contacts';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.label}>\n    <span className={styles.text}>Find contacts by name</span>\n    <input\n      className={styles.input}\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event => dispatch(contactsActions.filter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from '../Components/ContactForm/ContactForm';\nimport ContactList from '../Components/ContactList/ContactList';\nimport Filter from '../Components/Filter/Filter';\nimport contactsOperations from '../Redux/contacts/contacts-operations';\nimport contactsSelectors from '../Redux/contacts/contacts-selectors';\n\nclass ContactsView extends React.Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n\n        <Filter />\n        {this.props.isLoadingContacts && <h3>Loading...</h3>}\n        <ContactList />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1SpT1\",\"name\":\"ContactForm_name__2a7_y\",\"button\":\"ContactForm_button__26iob\",\"label\":\"ContactForm_label__19klw\",\"input\":\"ContactForm_input__yRgHr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__19LN7\",\"contact\":\"ContactListItem_contact__2lLWz\",\"button\":\"ContactListItem_button__3c1k9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__3dmvF\"};"],"sourceRoot":""}